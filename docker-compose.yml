services:
  backend:
    image: python:3.12
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - media-volume:/app/media
    environment:
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_ADMIN_ID: ${TELEGRAM_ADMIN_ID}
    command: ["uvicorn", "main:app", "--port", "8000", "--host", "0.0.0.0"]
    networks:
      - app-network
    

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    networks:
      - app-network
  
  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt/live/exclusivity.site/fullchain.pem:/exclusivity.pem
      - /etc/letsencrypt/live/exclusivity.site/privkey.pem:/exclusivity.key
    command: sh -c "nginx -c /etc/nginx/nginx.conf -g 'daemon off;'"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
  
  db:
    image: postgres
    container_name: postgres-db
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data

volumes:
  media-volume:
  postgres-data:

networks:
  app-network:
    driver: bridge